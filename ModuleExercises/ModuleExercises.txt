1. Determine what this Javascript code will print out (without running it):
x = 1;
var a = 5;
var b = 10;
var c = function(a, b, c) {
        document.write(x);     // Output: undefined
        document.write(a);     // Output: a = 8
            var f = function(a, b, c) {
            b = a;              
            document.write(b);  // Output: b = a = 8
            b = c;
            var x = 5;
            }
        f(a,b,c);
        document.write(b);   // Output: b = 9;
        var x = 10;
        }
c(8,9,10);
document.write(b);          // Output: b = 10;
document.write(x);          // Output: x = 1

2. Define Global Scope and Local Scope in Javascript.
    Global Scope: Before we write any Javascript code, we are at the global Scope
    Local Scope: Local Scope refers to any scope defined past in glocal Scope. Any function defined has its own local scope

3. Consider the following structure of Javascript code:
// Scope A
function XFunc () {
// Scope B
function YFunc () {
// Scope C
};
};
(a) Do statements in Scope A have access to variables defined in Scope B and C? No
(b) Do statements in Scope B have access to variables defined in Scope A? Yes
(c) Do statements in Scope B have access to variables defined in Scope C? No
(d) Do statements in Scope C have access to variables defined in Scope A? Yes
(e) Do statements in Scope C have access to variables defined in Scope B? Yes

4. What will be printed by the following (answer without running it)?
    var x = 9;
    function myFunction() {
        return x * x;
    }
    document.write(myFunction()); // Output: 81
    x = 5;
    document.write(myFunction());// Output: 25

5.
    var foo = 1;
    function bar() {
        if (!foo) {
            var foo = 10;
        }
        alert(foo);
    }
    bar();
    What will the alert print out? (Answer without running the code. Remember ‘hoisting’.)?
        alert print out: 10

6. Consider the following definition of an add( ) function to increment a counter variable:
    var add = (function () {
        var counter = 0;
        return function () {
            return counter += 1;
        }
    })();

    Modify the above module to define a count object with two methods: add( ) and reset( ). The count.add( ) method
    adds one to the counter (as above). The count.reset( ) method sets the counter to 0.

    var count = (function(){
        var counter = 0;
        let add = function(){
            return counter += 1;
        };
        let reset = function(){
            return counter = 0;
        };

        return{
            add:add,
            reset:reset
        };
    })();
    document.write(count.add() + "<br>");
    document.write(count.add() + "<br>");
    document.write(count.reset() + "<br>");

7. In the definition of add( ) shown in question 6, identify the "free" variable. In the context of a function closure,
what is a "free" variable? 
    - counter is a "free variable"

8. The add( ) function defined in question 6 always adds 1 to the counter each time it is called. Write a definition
of a function make_adder(inc), whose return value is an add function with increment value inc (instead of 1). Here
is an example of using this function:
add5 = make_adder(5);
add5( ); add5( ); add5( ); // final counter value is 15
add7 = make_adder(7);
add7( ); add7( ); add7( ); // final counter value is 21

    function make_adder(inc){
            let counter = 0;
            return function(){
                return counter += inc;
            };
    }
    let add5 = make_adder(5);
    add5();
    add5();
    add5();
    let add7 = make_adder(7);
    add7();
    add7();
    add7();

9. Suppose you are given a file of Javascript code containing a list of many function and variable declarations. All of
these function and variable names will be added to the Global Javascript namespace. What simple modification to
the Javascript file can remove all the names from the Global namespace?


10. Using the Revealing Module Pattern, write a Javascript definition of a Module that creates an Employee Object
with the following fields and methods:
    Private Field: name
    Private Field: age
    Private Field: salary
    Public Method: setAge(newAge)
    Public Method: setSalary(newSalary)
    Public Method: setName(newName)
    Private Method: getAge( )
    Private Method: getSalary( )
    Private Method: getName( )
    Public Method: increaseSalary(percentage) // uses private getSalary( )
    Public Method: incrementAge( ) // uses private getAge( )

    let module = (function(){
            let name, age, salary;

            let employee = function(name,age,salary){
                this.name = name;
                this.age = age;
                this.salary = salary;
            };
            
            let setAge = function(newAge){
                return this.age = newAge;
            };

            let setSalary = function(newSalary){
                return this.salary = newSalary;
            };

            let setName = function(newName){
                return this.name = newName;
            };

            let getAge = function(){
                return this.age;
            };

            let getSalary = function(){
                return this.salary;
            };

            let getName = function(){
                return this.name;
            };

            let increaseSalary = function(percentage){
                return getSalary() + (getSalary()*percentage/100);
            };

            let incrementAge = function(){
                return getAge();
            };

            return{
                employee: employee,
                setAge : setAge,
                setName: setName,
                setSalary: setSalary,
                increaseSalary: increaseSalary,
                incrementAge: incrementAge
            };
        })();

11. Rewrite your answer to Question 10 using the Anonymous Object Literal Return Pattern.

    let module = (function(){
            
            let name, age, salary;

            let employee = function(name,age,salary){
                this.name = name;
                this.age = age;
                this.salary = salary;
            };

            let getAge = function(){
                return this.age;
            };

            let getSalary = function(){
                return this.salary;
            };

            let getName = function(){
                return this.name;
            };

            return{
                employee: employee,
                setAge : function(newAge){
                    return this.age = newAge;
                },
                setName: function(newName){
                    return this.name = newName;
                },
                setSalary: function(newSalary){
                    return this.salary = newSalary;
                },
                increaseSalary: function(percentage){
                    return getSalary() + (getSalary()*percentage/100);
                },
                incrementAge: function(){
                    return getAge();
                }   
            };
        })();

12. Rewrite your answer to Question 10 using the Locally Scoped Object Literal Pattern.

let module = (function(){

            let myObject = {};

            let name, age, salary;

            myObject.employee = function(name,age,salary){
                this.name = name;
                this.age = age;
                this.salary = salary;
            };
            
            myObject.setAge = function(newAge){
                return this.age = newAge;
            };

            myObject.setSalary = function(newSalary){
                return this.salary = newSalary;
            };

            myObject.setName = function(newName){
                return this.name = newName;
            };

            let getAge = function(){
                return this.age;
            };

            let getSalary = function(){
                return this.salary;
            };

            let getName = function(){
                return this.name;
            };

            myObject.increaseSalary = function(percentage){
                return getSalary() + (getSalary()*percentage/100);
            };

            myObject.incrementAge = function(){
                return getAge();
            };

            return myObject;
        })();

13. Write a few Javascript instructions to extend the Module of Question 10 to have a public address field and
public methods setAddress(newAddress) and getAddress( ).

    module.extention = function(){
        let address;
        let setAddress(newAddress){
            return this.address = newAddress;
        };
        let getAddress(){
            return this.address;
        };

        return {
            address:address;
            setAddress:setAddress;
            getAddress:getAddress;
        };
    };

14. What is the output of the following code?
    const promise = new Promise((resolve, reject) => {
        reject(“Hattori”);
    });
    promise.then(val => alert(“Success: “ + val))
    .catch(e => alert(“Error: “ + e));

Output: Error: "Hattori"

15. What is the output of the following code?
    const promise = new Promise((resolve, reject) => {
    resolve(“Hattori”);
    setTimeout(()=> reject(“Yoshi”), 500);
    });
    promise.then(val => alert(“Success: “ + val))
    .catch(e => alert(“Error: “ + e));

Output: Success: "Hattori"

16. What is the output of the following code?
        function job(state) {
            return new Promise(function(resolve, reject) {
                if (state) {
                    resolve('success');
                } else {
                    reject('error');
                }   
            });
        }
        let promise = job(true);
        promise.then(function(data) {
            console.log(data);
            return job(false);})
            .catch(function(error) {
            console.log(error);
            return 'Error caught';
        });

        Output: success
                error